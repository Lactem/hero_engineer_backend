server.port=8081

jwt.signing.key.secret=gdcVGSelZGdrlAEUrdFXtdZmeCEynYsW
jwt.get.token.uri=/api/authenticate
jwt.refresh.token.uri=/api/refresh
jwt.http.request.header=Authorization
jwt.token.expiration.in.seconds=604800

#spring.redis.host=hero_engineer_redis_container
spring.redis.host=127.0.0.1
spring.redis.password=
spring.redis.port=6379

spring.data.mongodb.database=heroEngineer
spring.data.mongodb.host=127.0.0.1
#spring.data.mongodb.host=hero_engineer_mongo_container
spring.data.mongodb.port=27017
spring.data.mongodb.authentication-database=admin
#spring.data.mongodb.username=admin
#spring.data.mongodb.password=M!]mBSVe.9P{uk7XprbnR.dRk)b7v"7C
spring.data.mongodb.username=heroEngineerUser
spring.data.mongodb.password=M,cYR3.E2#8`s%sY

# FIRST: Follow https://docs.mongodb.com/manual/tutorial/enable-authentication/
# use admin
# db.createUser({user: "admin",pwd: passwordPrompt(), roles: [ { role: "userAdminAnyDatabase", db: "admin" }, "readWriteAnyDatabase" ]})
# pwd: M!]mBSVe.9P{uk7XprbnR.dRk)b7v"7C
# Add the following to the config
# security:
#    authorization: enabled

# use admin
# db.createUser({user: "heroEngineerUser", pwd: passwordPrompt(), roles: [{role: "dbOwner", db: "heroEngineer"}], authenticationRestrictions: [{clientSource: ["127.0.0.1"]}]})
# pwd: M,cYR3.E2#8`s%sY

# To make a professor:
# use heroEngineer
# db.user.update({"email": "prof@usc.edu"}, {$set: {"isProf": true}})

# To connect:
# mongo --port 27017  --authenticationDatabase "admin" -u "heroEngineerUser" -p